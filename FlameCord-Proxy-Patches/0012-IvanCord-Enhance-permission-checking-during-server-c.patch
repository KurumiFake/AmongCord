From 37c50ba96dfbc7ecc21fb298de8cd01ffe3d2939 Mon Sep 17 00:00:00 2001
From: Mystiflow <mystiflow@gmail.com>
Date: Thu, 9 Dec 2021 20:43:13 +0200
Subject: [PATCH] (IvanCord) Enhance permission checking during server connects

Previously the only time server permissions were tested was using the
/server command. This left a door for every ProxiedPlayer#connect(ServerInfo)
invocation to ignore the ServerInfo#canAccess(CommandSender) check. This
commit implements a few features:

- A config option to always go through the canAccess check during any server
connect attempt ; disabled by default as to retain current behavior and
to not disrupt anyones current setups.
- An option to override whatever setting had been set in the config by
directly altering this on the ServerConnectRequest.
- A new ServerConnectRequest reason field 'UNAUTHORISED'
- Wildcard permission

I feel like this is a feature needed for security purposes as to prevent
accidental entrances to hidden servers. If needed of course plugins can
bypass the flags.

Original code from https://github.com/MrIvanPlays/IvanCord/, licensed under MIT

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index d4bdfcb1..2a790dd3 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -289,5 +289,14 @@ public interface ProxyConfig
      * @return brand
      */
     String getBrand();
+
+    /**
+     * Should al plugin and proxy executed requests for a player to a server require
+     * direct access permission to a server. This is disabled by default, by setting to
+     * true; this will be enabled. This flag can also be toggled in the ServerConnectRequest instance
+     *
+     * @return true if players need authorisation for connections
+     */
+    boolean isRequireAccess();
     // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
index d21370be..d1cae44e 100644
--- a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
+++ b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
@@ -40,7 +40,13 @@ public class ServerConnectRequest
         /**
          * Connection failed, error can be accessed from callback method handle.
          */
-        FAIL
+        // IvanCord start
+        FAIL,
+        /**
+         * User has no access to this server.
+         */
+        UNAUTHORISED
+        // IvanCord end
     }
 
     /**
@@ -76,6 +82,14 @@ public class ServerConnectRequest
     @Setter
     private boolean sendFeedback;
     // Waterfall end
+    // IvanCord start
+    /**
+     * Disabled by default. Set to true if the permissions defined in the config
+     * to restrict servers to certain players should be respected for this request.
+     */
+    @Setter
+    private boolean requireAccess;
+    // IvanCord end
 
     /**
      * Class that sets default properties/adds methods to the lombok builder
@@ -84,6 +98,7 @@ public class ServerConnectRequest
     public static class Builder
     {
 
+        private boolean requireAccess = ProxyServer.getInstance().getConfig().isRequireAccess(); // IvanCord
         private int connectTimeout = ProxyServer.getInstance().getConfig().getServerConnectTimeout();
         private boolean isSendFeedback = true; // Waterfall # God. f##king. lombok.
     }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index c3934d73..28edb875 100644
--- a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -12,6 +12,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
 
     private boolean kickToLobby = true;
     private String brand = "AmongCord"; // AmongCord
+    private boolean requireAccess = false;
 
     @Override
     public void load()
@@ -21,6 +22,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         config.load( false );
         kickToLobby = config.getBoolean( "kick_to_lobby", kickToLobby );
         brand = config.getString( "brand", brand );
+        requireAccess = config.getBoolean( "strict_permissions", requireAccess );
     }
 
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 448c6caa..fad67ed9 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -41,6 +41,13 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 public class BungeeServerInfo implements ServerInfo
 {
 
+    // IvanCord start
+    private static final String SERVER_PERMISSION = "bungeecord.server.%s";
+    private static final String SERVER_PERMISSION_WILDCARD = String.format( SERVER_PERMISSION, "*" );
+    @Getter
+    private final String permission = String.format( SERVER_PERMISSION, getName() );
+    // IvanCord end
+
     @Getter
     private final String name;
     @Getter
@@ -72,17 +79,19 @@ public class BungeeServerInfo implements ServerInfo
         return Collections.unmodifiableCollection( new HashSet<>( players ) );
     }
 
+    /* // IvanCord
     @Override
     public String getPermission()
     {
         return "bungeecord.server." + name;
     }
+     */ // IvanCord
 
     @Override
     public boolean canAccess(CommandSender player)
     {
         Preconditions.checkNotNull( player, "player" );
-        return !restricted || player.hasPermission( getPermission() );
+        return !restricted || ( player.hasPermission( SERVER_PERMISSION_WILDCARD ) || player.hasPermission( getPermission() ) ); // IvanCord
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 934f9b50..73058aac 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -337,6 +337,19 @@ public final class UserConnection implements ProxiedPlayer
             if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "already_connecting" ) ); // Waterfall
             return;
         }
+        // IvanCord start
+        if ( request.isRequireAccess() && !target.canAccess( this ) )
+        {
+            if ( callback != null )
+            {
+                callback.done( ServerConnectRequest.Result.UNAUTHORISED, null );
+            } else
+            {
+                sendMessage( bungee.getTranslation( "no_server_permission" ) );
+            }
+            return;
+        }
+        // IvanCord end
 
         pendingConnects.add( target );
 
-- 
2.23.0

