From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Fri, 20 May 2022 07:18:57 +0700
Subject: [PATCH] useless patch xd


diff --git a/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java b/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java
index 8507e1a7..42ce7f4e 100644
--- a/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java
+++ b/flamecord/src/main/java/dev/_2lstudios/antibot/CountryCheck.java
@@ -36,7 +36,7 @@ public class CountryCheck {
 
         try {
             if (!file.exists()) {
-                System.out.println("Starting download of MaxMindDB (This will take some seconds...)");
+                System.out.println("Downloading MaxMindDB...");
                 download(new URL("https://git.io/GeoLite2-Country.mmdb"), file);
             }
 
diff --git a/log4j/src/main/resources/log4j2-bungee.xml b/log4j/src/main/resources/log4j2-bungee.xml
index 1c3265ed..f40ec266 100644
--- a/log4j/src/main/resources/log4j2-bungee.xml
+++ b/log4j/src/main/resources/log4j2-bungee.xml
@@ -4,17 +4,17 @@
     <Appenders>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{%d{HH:mm:ss} [%level] [%logger] %paperMinecraftFormatting{%msg}%n%ex}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{%d{HH:mm:ss} %level] %logger] %paperMinecraftFormatting{%msg}%n%ex}">
                     <!-- Log root and BungeeCord loggers without prefix -->
-                    <PatternMatch key=",BungeeCord" pattern="%highlightError{%d{HH:mm:ss} [%level] %paperMinecraftFormatting{%msg}%n%ex}" />
+                    <PatternMatch key=",BungeeCord" pattern="%highlightError{%d{HH:mm:ss} %level] %paperMinecraftFormatting{%msg}%n%ex}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="proxy.log.0" filePattern="proxy.log.%i" immediateFlush="false">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%d{HH:mm:ss} [%level] [%logger] %paperMinecraftFormatting{%msg}{strip}%n%ex">
+                <LoggerNamePatternSelector defaultPattern="%d{HH:mm:ss} %level] %logger] %paperMinecraftFormatting{%msg}{strip}%n%ex">
                     <!-- Log root and BungeeCord loggers without prefix -->
-                    <PatternMatch key=",BungeeCord" pattern="%d{HH:mm:ss} [%level] %paperMinecraftFormatting{%msg}{strip}%n%ex" />
+                    <PatternMatch key=",BungeeCord" pattern="%d{HH:mm:ss} %level] %paperMinecraftFormatting{%msg}{strip}%n%ex" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
             <Policies>
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
index 663bddec..32e89105 100644
--- a/log4j/src/main/resources/log4j2.xml
+++ b/log4j/src/main/resources/log4j2.xml
@@ -3,17 +3,17 @@
     <Appenders>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %paperMinecraftFormatting{%msg}%n%xEx}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{%d{HH:mm:ss} %level] %logger]: %paperMinecraftFormatting{%msg}%n%xEx}">
                     <!-- Log root and BungeeCord loggers without prefix -->
-                    <PatternMatch key=",BungeeCord" pattern="%highlightError{[%d{HH:mm:ss} %level]: %paperMinecraftFormatting{%msg}%n%xEx}" />
+                    <PatternMatch key=",BungeeCord" pattern="%highlightError{%d{HH:mm:ss} %level]: %paperMinecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %paperMinecraftFormatting{%msg}{strip}%n">
+                <LoggerNamePatternSelector defaultPattern="%d{HH:mm:ss}] %t/%level] %logger]: %paperMinecraftFormatting{%msg}{strip}%n">
                     <!-- Log root and BungeeCord loggers without prefix -->
-                    <PatternMatch key=",BungeeCord" pattern="[%d{HH:mm:ss}] [%t/%level]: %paperMinecraftFormatting{%msg}{strip}%n" />
+                    <PatternMatch key=",BungeeCord" pattern="%d{HH:mm:ss}] %t/%level]: %paperMinecraftFormatting{%msg}{strip}%n" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
             <Policies>
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 761382e7..d9fbb79d 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -449,7 +449,7 @@ public final class UserConnection implements ProxiedPlayer
     {
         if ( !ch.isClosing() )
         {
-            bungee.getLogger().log( Level.INFO, "[{0}] disconnected with: {1}", new Object[]
+            bungee.getLogger().log( Level.INFO, "{0} disconnected : {1}", new Object[]
             {
                 getName(), BaseComponent.toLegacyText( reason )
             } );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 20327f43..edcad1dd 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -439,7 +439,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotRatelimitLog() )
                     {
-                        bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is pinging too fast", ch.getRemoteAddress() );
+                        bungee.getLogger().log( Level.INFO, "> {0} is pinging too fast", ch.getRemoteAddress() );
                     }
 
                     disconnect( bungee.getTranslation( "antibot_ratelimit", addressData.getPingsSecond() ) );
@@ -465,7 +465,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotRatelimitLog() )
                     {
-                        bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is connecting too fast", ch.getRemoteAddress() );
+                        bungee.getLogger().log( Level.INFO, "> {0} is connecting too fast", ch.getRemoteAddress() );
                     }
 
                     disconnect( bungee.getTranslation( "antibot_ratelimit", addressData.getConnectionsSecond() ) );
@@ -544,7 +544,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotAccountsLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has too many accounts", ch.getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} has too many accounts", ch.getRemoteAddress() );
             }
 
             disconnect( bungee.getTranslation( "antibot_accounts", addressData.getNicknames().size() ) );
@@ -555,7 +555,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotNicknameLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has a blacklisted nickname", ch.getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} has blacklisted nickname", ch.getRemoteAddress() );
             }
 
             disconnect( bungee.getTranslation( "antibot_nickname", loginRequest.getData() ) );
@@ -566,7 +566,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotReconnectLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has to reconnect to join", ch.getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} has to reconnect", ch.getRemoteAddress() );
             }
 
             disconnect( bungee.getTranslation( "antibot_reconnect", FlameCord.getInstance().getFlameCordConfiguration().getAntibotReconnectAttempts() - addressData.getTotalConnections() ) );
@@ -577,7 +577,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotCountryLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has his country blocked from the server", ch.getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} is country blocked", ch.getRemoteAddress() );
             }
 
             disconnect( bungee.getTranslation( "antibot_country", addressData.getCountry() ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index fd09b6d4..1d6cc7df 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -199,7 +199,7 @@ public class UpstreamBridge extends PacketHandler
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotFastChatLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] is chatting too fast", con.getCh().getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} is chatting too fast", con.getCh().getRemoteAddress() );
             }
 
             con.disconnect( bungee.getTranslation( "antibot_fastchat" ) );
@@ -210,7 +210,7 @@ public class UpstreamBridge extends PacketHandler
         {
             if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotPasswordLog() )
             {
-                bungee.getLogger().log( Level.INFO, "[FlameCord] [{0}] has entered a repeated password", con.getCh().getRemoteAddress() );
+                bungee.getLogger().log( Level.INFO, "> {0} has entered a repeated password", con.getCh().getRemoteAddress() );
             }
 
             con.disconnect( bungee.getTranslation( "antibot_password", checkManager.getPasswordCheck().getRepeatCount() ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 05a23a12..dd4faaeb 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -64,7 +64,7 @@ public class PipelineUtils
             {
                 if ( FlameCord.getInstance().getFlameCordConfiguration().isAntibotFirewallLog() )
                 {
-                    BungeeCord.getInstance().getLogger().log( Level.INFO, "[FlameCord] [{0}] is firewalled from the server", ch.remoteAddress() );
+                    BungeeCord.getInstance().getLogger().log( Level.INFO, "> {0} firewalled", ch.remoteAddress() );
                 }
 
                 ch.close();
@@ -148,11 +148,11 @@ public class PipelineUtils
     {
         if ( !PlatformDependent.isWindows() && Boolean.parseBoolean( System.getProperty( "bungee.epoll", "true" ) ) )
         {
-            ProxyServer.getInstance().getLogger().info( "Not on Windows, attempting to use enhanced EpollEventLoop" );
+            ProxyServer.getInstance().getLogger().info( "Attempting to use enhanced EpollEventLoop" );
 
             if ( epoll = Epoll.isAvailable() )
             {
-                ProxyServer.getInstance().getLogger().info( "Epoll is working, utilising it!" );
+                ProxyServer.getInstance().getLogger().info( "Epoll is working." );
             } else
             {
                 ProxyServer.getInstance().getLogger().log( Level.WARNING, "Epoll is not working, falling back to NIO: {0}", Util.exception( Epoll.unavailabilityCause() ) );
